package bot

import (
	"errors"
	"fmt"
	"github.com/digkill/veo-telegram-bot/internal/generator"
	storage "github.com/digkill/veo-telegram-bot/internal/repository"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message != nil {
		handleMessage(bot, update.Message)
	}

	if update.CallbackQuery != nil {
		handleCallback(bot, update.CallbackQuery)
	}

	if update.PreCheckoutQuery != nil {
		resp := tgbotapi.PreCheckoutConfig{
			PreCheckoutQueryID: update.PreCheckoutQuery.ID,
			OK:                 true,
		}
		bot.Send(resp)
	}

	if update.Message != nil && update.Message.SuccessfulPayment != nil {
		handlePayment(bot, update.Message)
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	text := msg.Text

	if text == "/start" {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n`–ö–æ—Ç –Ω–∞ –ø–ª—è–∂–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ #9:16`\n\n–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /buy —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã üí≥"))
		return
	}

	if text == "/buy" {
		showBuyOptions(bot, chatID)
		return
	}

	// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
	go func() {
		userID := msg.From.ID
		username := msg.From.UserName

		// ‚õëÔ∏è –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
		if err := storage.EnsureUser(userID, username); err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: "+err.Error()))
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
		err := storage.SubtractCredits(userID, 150)
		if err != nil {
			if errors.Is(err, storage.ErrInsufficientCredits) {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ö—É–ø–∏ –ø–∞–∫–µ—Ç —Å –ø–æ–º–æ—â—å—é /buy"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: "+err.Error()))
			}
			return
		}

		bot.Send(tgbotapi.NewMessage(chatID, "üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏ 30‚Äì60 —Å–µ–∫—É–Ω–¥..."))

		videoPath, err := generator.GenerateVideo(text, userID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: "+err.Error()))
			return
		}

		video := tgbotapi.NewVideo(chatID, tgbotapi.FilePath(videoPath))
		video.Caption = "–í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ!"
		bot.Send(video)
	}()
}

func showBuyOptions(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ üí≥")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("200 –∫—Ä. ‚Äî 450 ‚ÇΩ", "buy_200"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("500 –∫—Ä. ‚Äî 900 ‚ÇΩ", "buy_500"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1200 –∫—Ä. ‚Äî 1800 ‚ÇΩ", "buy_1200"),
		),
	)
	bot.Send(msg)
}
func handleCallback(bot *tgbotapi.BotAPI, cb *tgbotapi.CallbackQuery) {
	var credits int
	var price int
	var label string

	switch cb.Data {
	case "buy_200":
		credits = 200
		price = 45000
		label = "200 –∫—Ä–µ–¥–∏—Ç–æ–≤"
	case "buy_500":
		credits = 500
		price = 90000
		label = "500 –∫—Ä–µ–¥–∏—Ç–æ–≤"
	case "buy_1200":
		credits = 1200
		price = 180000
		label = "1200 –∫—Ä–µ–¥–∏—Ç–æ–≤"
	default:
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏"))
		return
	}

	// –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂–µ–º –æ–ø–ª–∞—Ç—É
	bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, fmt.Sprintf("üí≥ –ü–∞–∫–µ—Ç: %s. –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã‚Ä¶", label)))

	invoice := tgbotapi.NewInvoice(
		cb.Message.Chat.ID,                 // chatID
		"–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤",                 // title
		fmt.Sprintf("–ü–∞–∫–µ—Ç: %s", label),    // description
		fmt.Sprintf("credits_%d", credits), // payload
		os.Getenv("PROVIDER_TOKEN"),        // provider_token
		"RUB",                              // currency
		"",                                 // photo_url
		[]tgbotapi.LabeledPrice{
			{
				Label:  label,
				Amount: price,
			},
		},
	)

	_, err := bot.Send(invoice)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
	}
}

func handlePayment(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	payload := msg.SuccessfulPayment.InvoicePayload
	userID := msg.From.ID
	username := msg.From.UserName

	if strings.HasPrefix(payload, "credits_") {
		parts := strings.Split(payload, "_")
		credits, _ := strconv.Atoi(parts[1])

		// –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
		err := storage.AddCredits(userID, username, credits)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"))
			return
		}

		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞—á–∏—Å–ª–µ–Ω–æ!", credits)))
	}
}
