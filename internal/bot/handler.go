package bot

import (
	"errors"
	"fmt"
	"github.com/digkill/veo-telegram-bot/internal/generator"
	"github.com/digkill/veo-telegram-bot/internal/logger"
	"github.com/digkill/veo-telegram-bot/internal/repository"
	"github.com/digkill/veo-telegram-bot/internal/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"os"
	"strconv"
	"strings"
)

const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø Veo Telegram Bot ‚Äî —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.

üé• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç (–ø—Ä–æ–º—Ç), –∏ —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Google Veo.

üìè –£–∫–∞–∂–∏ —Ñ–æ—Ä–º–∞—Ç:
‚Ä¢ –ü—Ä–∏–º–µ—Ä: *–ö–æ—Ç –Ω–∞ –ø–ª—è–∂–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ #9:16*
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: #9:16, #16:9, #1:1

üí≥ –ù–∞–ø–∏—à–∏ /buy, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã.
üìñ –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.
`

const helpMessage = `üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é  
/balance ‚Äî —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å  
/buy ‚Äî –∫—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã  
/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
*–§—ç–Ω—Ç–µ–∑–∏ –ª–µ—Å –≤ –ª—É–Ω–Ω–æ–º —Å–≤–µ—Ç–µ #16:9*

üéûÔ∏è –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —Ç—ã –ø–æ–ª—É—á–∏—à—å AI-–≤–∏–¥–µ–æ!
`

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	logger.LogUpdate(update)

	if update.Message != nil {
		handleMessage(bot, update.Message)
	}

	if update.CallbackQuery != nil {
		logger.LogCallback(update.CallbackQuery)
		handleCallback(bot, update.CallbackQuery)
	}

	if update.PreCheckoutQuery != nil {
		resp := tgbotapi.PreCheckoutConfig{
			PreCheckoutQueryID: update.PreCheckoutQuery.ID,
			OK:                 true,
		}
		bot.Send(resp)
	}

	if update.Message != nil && update.Message.SuccessfulPayment != nil {
		handlePayment(bot, update.Message)
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	logger.LogMessage(msg)

	if msg.SuccessfulPayment != nil {
		return // –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
	}

	chatID := msg.Chat.ID
	text := msg.Text
	userID := msg.From.ID
	username := msg.From.UserName

	switch text {
	case "/start":
		msg := tgbotapi.NewMessage(chatID, welcomeMessage)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return

	case "/help":
		msg := tgbotapi.NewMessage(chatID, helpMessage)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return

	case "/buy":
		showBuyOptions(bot, chatID)
		return

	case "/balance":
		balance, err := repository.GetBalance(userID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"))
			return
		}
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üí∞ –£ —Ç–µ–±—è %d –∫—Ä–µ–¥–∏—Ç–æ–≤.", balance)))
		return
	}

	go func() {
		if err := repository.EnsureUser(userID, username); err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: "+err.Error()))
			return
		}

		balance, err := repository.GetBalance(userID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
			return
		}

		if balance < 150 {
			bot.Send(tgbotapi.NewMessage(chatID, "üò¢ –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–Ω—É–∂–Ω–æ 150). –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /buy"))
			return
		}

		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ (150 –∫—Ä.)‚Ä¶ –£ —Ç–µ–±—è %d –∫—Ä. –æ—Å—Ç–∞–ª–æ—Å—å.", balance)))

		imageBase64 := ""
		if msg.Photo != nil && len(msg.Photo) > 0 {
			photo := msg.Photo[len(msg.Photo)-1]
			file, err := bot.GetFile(tgbotapi.FileConfig{FileID: photo.FileID})
			if err == nil {
				url := file.Link(bot.Token)
				imageBase64, err = utils.DownloadAndEncodeImage(url)
				if err != nil {
					logger.LogError("image", map[string]interface{}{
						"user_id": userID,
						"error":   err.Error(),
					})
				}
			}
		}

		videoPath, err := generator.GenerateVideo(text, userID, imageBase64)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: "+err.Error()+"\n\nüí° –ù–µ –≤–æ–ª–Ω—É–π—Å—è, –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ —Å–ø–∏—Å–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–æ–π –ø—Ä–æ–º—Ç."))
			repository.LogAction(userID, "generation_failed", text, false, "")
			if videoPath != "" {
				_ = os.Remove(videoPath)
			}
			return
		}

		if err := repository.SubtractCredits(userID, 150); err != nil {
			if errors.Is(err, repository.ErrInsufficientCredits) {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è. –ö—É–ø–∏ –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ /buy"))
				repository.LogAction(userID, "delivery_failed", text, false, videoPath)
				_ = os.Remove(videoPath)
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏: "+err.Error()))
			}
			return
		}

		video := tgbotapi.NewVideo(chatID, tgbotapi.FilePath(videoPath))
		video.Caption = "–í–æ—Ç —Ç–≤–æ—ë –≤–∏–¥–µ–æ!"
		bot.Send(video)

		newBalance, _ := repository.GetBalance(userID)
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ! –û—Å—Ç–∞—Ç–æ–∫: %d –∫—Ä.", newBalance)))
	}()
}

func showBuyOptions(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ üí≥")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("200 –∫—Ä. ‚Äî 450 ‚ÇΩ", "buy_200")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("500 –∫—Ä. ‚Äî 900 ‚ÇΩ", "buy_500")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("1200 –∫—Ä. ‚Äî 1800 ‚ÇΩ", "buy_1200")),
	)
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, cb *tgbotapi.CallbackQuery) {
	var credits, price int
	var label, startParam string

	switch cb.Data {
	case "buy_200":
		credits, price, label, startParam = 200, 45000, "200 –∫—Ä–µ–¥–∏—Ç–æ–≤", "buy_200"
	case "buy_500":
		credits, price, label, startParam = 500, 90000, "500 –∫—Ä–µ–¥–∏—Ç–æ–≤", "buy_500"
	case "buy_1200":
		credits, price, label, startParam = 1200, 180000, "1200 –∫—Ä–µ–¥–∏—Ç–æ–≤", "buy_1200"
	default:
		return
	}

	invoice := tgbotapi.InvoiceConfig{
		BaseChat:            tgbotapi.BaseChat{ChatID: cb.Message.Chat.ID},
		Title:               "–ü–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤",
		Description:         fmt.Sprintf("–ü–∞–∫–µ—Ç: %s", label),
		Payload:             fmt.Sprintf("credits_%d", credits),
		ProviderToken:       os.Getenv("PROVIDER_TOKEN"),
		StartParameter:      startParam,
		Currency:            "RUB",
		Prices:              []tgbotapi.LabeledPrice{{Label: label, Amount: price}},
		SuggestedTipAmounts: []int{},
		IsFlexible:          false,
	}

	if _, err := bot.Send(invoice); err != nil {
		bot.Send(tgbotapi.NewMessage(cb.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: "+err.Error()))
	}
}

func handlePayment(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	logger.LogPayment(msg)

	payload := msg.SuccessfulPayment.InvoicePayload
	userID := msg.From.ID
	username := msg.From.UserName

	if strings.HasPrefix(payload, "credits_") {
		parts := strings.Split(payload, "_")
		credits, _ := strconv.Atoi(parts[1])

		if err := repository.AddCredits(userID, username, credits); err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"))
			return
		}

		// –ü–æ–ª—É—á–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
		balance, err := repository.GetBalance(userID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n‚ö†Ô∏è –ù–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.", credits)))
			return
		}

		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞—á–∏—Å–ª–µ–Ω–æ!\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d –∫—Ä.", credits, balance)))
	}
}
