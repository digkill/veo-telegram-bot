package cache

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/redis/go-redis/v9"
)

var Rdb *redis.Client
var ctx = context.Background()

func Init() {
	Rdb = redis.NewClient(&redis.Options{
		Addr:     os.Getenv("REDIS_ADDR"),     // –ü—Ä–∏–º–µ—Ä: "localhost:6379"
		Password: os.Getenv("REDIS_PASSWORD"), // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
		DB:       0,
	})

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	if err := Rdb.Ping(ctx).Err(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: %v", err)
	} else {
		log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
	}
}

// promptData ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
type promptData struct {
	Prompt      string `json:"prompt"`
	ImageBase64 string `json:"image_base64,omitempty"`
}

// StorePromptRequest —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (TTL 30 –º–∏–Ω—É—Ç)
func StorePromptRequest(userID int64, prompt string, imageBase64 string) error {
	data := promptData{
		Prompt:      prompt,
		ImageBase64: imageBase64,
	}
	jsonData, err := json.Marshal(data)
	if err != nil {
		log.Printf("‚ùå Marshal error for user %d: %v\n", userID, err)
		return fmt.Errorf("marshal error: %w", err)
	}

	key := fmt.Sprintf("prompt:%d", userID)
	err = Rdb.Set(ctx, key, jsonData, 30*time.Minute).Err()
	if err != nil {
		log.Printf("‚ùå Redis SET error for user %d: %v\n", userID, err)
		return fmt.Errorf("redis set error: %w", err)
	}

	log.Printf("‚úÖ Prompt saved for user %d: %s\n", userID, prompt)
	return nil
}

// GetPromptData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ userID
func GetPromptData(userID int64) (string, string, error) {
	key := fmt.Sprintf("prompt:%d", userID)
	val, err := Rdb.Get(ctx, key).Result()
	if err != nil {
		log.Printf("‚ùå Redis GET error for user %d: %v\n", userID, err)
		return "", "", err
	}

	var data promptData
	if err := json.Unmarshal([]byte(val), &data); err != nil {
		log.Printf("‚ùå Unmarshal error for user %d: %v\n", userID, err)
		return "", "", fmt.Errorf("unmarshal error: %w", err)
	}

	log.Printf("üì¶ Prompt retrieved for user %d: %s\n", userID, data.Prompt)
	return data.Prompt, data.ImageBase64, nil
}

// ClearPrompt —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º—Ç
func ClearPrompt(userID int64) {
	key := fmt.Sprintf("prompt:%d", userID)
	err := Rdb.Del(ctx, key).Err()
	if err != nil {
		log.Printf("‚ö†Ô∏è Redis DEL error for user %d: %v\n", userID, err)
	} else {
		log.Printf("üßπ Prompt cleared for user %d\n", userID)
	}
}
